import asyncio
import re
import requests
import cohere
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ContextTypes
from scrapers.news_scrapers import (
    get_html_links_from_url,
    get_devops_content,
    get_cafef_content,
    get_vnexpress_content
)
from .utils import split_message, summarize_text
from .config import COHERE_API_KEY, COHERE_MODEL

# Dictionary ƒë·ªÉ l∆∞u tr·ªØ link c·ªßa ng∆∞·ªùi d√πng
user_links = {}

async def process_article(update: Update, context: ContextTypes.DEFAULT_TYPE, content: str, article_url: str = None):
    """X·ª≠ l√Ω v√† t√≥m t·∫Øt n·ªôi dung b√†i vi·∫øt"""
    try:
        if not content:
            await update.message.reply_text("Kh√¥ng th·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt.")
            return

        # Kh·ªüi t·∫°o Cohere client
        co = cohere.Client(COHERE_API_KEY)
        
        # T√≥m t·∫Øt n·ªôi dung
        summary_response = co.chat(
            model=COHERE_MODEL,
            message="T√≥m t·∫Øt n·ªôi dung b√†i b√°o sau trong 200-300 t·ª´: " + content
        )

        # T·∫°o th√¥ng b√°o
        message = f"""üîó Link b√†i vi·∫øt: {article_url}

üìù T√ìM T·∫ÆT:
{summary_response.text}"""

        # Chia nh·ªè n·∫øu th√¥ng b√°o qu√° d√†i
        parts = split_message(message)
        for part in parts:
            await update.message.reply_text(part)
            await asyncio.sleep(0.5)  # Delay ƒë·ªÉ tr√°nh rate limit
            
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt: {str(e)}")
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /start"""
    welcome_message = (
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi News Bot!\n\n"
        "C√°c l·ªánh c√≥ s·∫µn:\n"
        "/devops - L·∫•y b√†i vi·∫øt t·ª´ devops.vn\n"
        "/cafef - L·∫•y b√†i vi·∫øt t·ª´ cafef.vn\n"
        "/vnexpress - L·∫•y b√†i vi·∫øt t·ª´ vnexpress.net\n\n"
        "C√°ch s·ª≠ d·ª•ng:\n"
        "1. G√µ l·ªánh ƒë·ªÉ l·∫•y b√†i vi·∫øt ƒë·∫ßu ti√™n\n"
        "2. G√µ l·ªánh + s·ªë ƒë·ªÉ l·∫•y b√†i vi·∫øt theo s·ªë th·ª© t·ª±\n"
        "3. G√µ l·ªánh + link ƒë·ªÉ ph√¢n t√≠ch b√†i vi·∫øt c·ª• th·ªÉ"
    )
    await update.message.reply_text(welcome_message)

async def devops_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /devops"""
    try:
        # L·∫•y tham s·ªë t·ª´ ng∆∞·ªùi d√πng
        args = context.args
        user_id = update.effective_user.id
        
        # N·∫øu kh√¥ng c√≥ tham s·ªë, l·∫•y b√†i vi·∫øt ƒë·∫ßu ti√™n t·ª´ trang ch·ªß
        if not args:
            links = await get_html_links_from_url("https://devops.vn")
            if not links:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o.")
                return
            article_url = links[0]
            content = await get_devops_content(article_url)
            if not content:
                await update.message.reply_text("Kh√¥ng th·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt.")
                return
            await process_article(update, context, content, article_url)
            return
            
        # N·∫øu c√≥ tham s·ªë l√† s·ªë
        if args[0].isdigit():
            index = int(args[0]) - 1
            links = await get_html_links_from_url("https://devops.vn")
            if not links:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o.")
                return
            if index < 0 or index >= len(links):
                await update.message.reply_text(f"S·ªë b√†i vi·∫øt kh√¥ng h·ª£p l·ªá! Ch·ªâ c√≥ {len(links)} b√†i vi·∫øt.")
                return
            article_url = links[index]
            content = await get_devops_content(article_url)
            if not content:
                await update.message.reply_text("Kh√¥ng th·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt.")
                return
            await process_article(update, context, content, article_url)
            return
            
        # N·∫øu tham s·ªë l√† URL
        article_url = args[0]
        if not article_url.startswith('https://devops.vn/'):
            await update.message.reply_text("Link kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p link t·ª´ devops.vn")
            return
            
        content = await get_devops_content(article_url)
        if not content:
            await update.message.reply_text("Kh√¥ng th·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt.")
            return
        await process_article(update, context, content, article_url)
        
    except Exception as e:
        print(f"L·ªói trong devops_handler: {str(e)}")
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {str(e)}")

async def cafef_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /cafef"""
    try:
        # L·∫•y tham s·ªë t·ª´ ng∆∞·ªùi d√πng
        args = context.args
        user_id = update.effective_user.id
        
        # L·∫•y danh s√°ch link n·∫øu ch∆∞a c√≥
        if user_id not in user_links:
            links = await get_html_links_from_url("https://cafef.vn")
            user_links[user_id] = links
        
        if not user_links[user_id]:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o t·ª´ cafef.vn.")
            return
        
        if not args:
            # L·∫•y b√†i vi·∫øt ƒë·∫ßu ti√™n
            article_url = user_links[user_id][0]
            content = await get_cafef_content(article_url)
            await process_article(update, context, content, article_url)
        elif args[0].isdigit():
            # L·∫•y b√†i vi·∫øt theo s·ªë
            index = int(args[0]) - 1
            if 0 <= index < len(user_links[user_id]):
                article_url = user_links[user_id][index]
                content = await get_cafef_content(article_url)
                await process_article(update, context, content, article_url)
            else:
                await update.message.reply_text(f"S·ªë b√†i vi·∫øt kh√¥ng h·ª£p l·ªá! Ch·ªâ c√≥ {len(user_links[user_id])} b√†i vi·∫øt.")
        else:
            # Ph√¢n t√≠ch link c·ª• th·ªÉ
            article_url = args[0]
            content = await get_cafef_content(article_url)
            await process_article(update, context, content, article_url)
        
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {str(e)}")

async def vnexpress_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /vnexpress"""
    try:
        # L·∫•y tham s·ªë t·ª´ ng∆∞·ªùi d√πng
        args = context.args
        user_id = update.effective_user.id
        
        # L·∫•y danh s√°ch link n·∫øu ch∆∞a c√≥
        if user_id not in user_links:
            links = await get_html_links_from_url("https://vnexpress.net")
            user_links[user_id] = links
        
        if not user_links[user_id]:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o t·ª´ vnexpress.net.")
            return
        
        if not args:
            # L·∫•y b√†i vi·∫øt ƒë·∫ßu ti√™n
            article_url = user_links[user_id][0]
            content = await get_vnexpress_content(article_url)
            await process_article(update, context, content, article_url)
        elif args[0].isdigit():
            # L·∫•y b√†i vi·∫øt theo s·ªë
            index = int(args[0]) - 1
            if 0 <= index < len(user_links[user_id]):
                article_url = user_links[user_id][index]
                content = await get_vnexpress_content(article_url)
                await process_article(update, context, content, article_url)
            else:
                await update.message.reply_text(f"S·ªë b√†i vi·∫øt kh√¥ng h·ª£p l·ªá! Ch·ªâ c√≥ {len(user_links[user_id])} b√†i vi·∫øt.")
        else:
            # Ph√¢n t√≠ch link c·ª• th·ªÉ
            article_url = args[0]
            content = await get_vnexpress_content(article_url)
            await process_article(update, context, content, article_url)
        
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {str(e)}")

# H√†m l·∫•y v√† t√≥m t·∫Øt b√†i b√°o theo th·ª© t·ª± n
def get_summary_by_index(n):
    try:
        # B1: Truy c·∫≠p trang ch·ªß
        url = 'https://vnexpress.net/'
        response = requests.get(url)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')

        # B2: T√¨m danh s√°ch link .html
        news_items = soup.find_all('a')
        html_links = []
        for item in news_items:
            link = item.get('href', '')
            if link.endswith('.html') and link.startswith('http'):
                html_links.append(link)

        if not html_links:
            return "Kh√¥ng t√¨m th·∫•y b√†i b√°o n√†o."

        if n >= len(html_links):
            return f"Kh√¥ng t√¨m th·∫•y b√†i b√°o th·ª© {n}. Ch·ªâ c√≥ {len(html_links)} b√†i b√°o."

        article_url = html_links[n]

        # B3: Truy c·∫≠p b√†i vi·∫øt
        article_response = requests.get(article_url)
        article_soup = BeautifulSoup(article_response.text, 'html.parser')
        cleaned_text = re.sub(r'\n+', '\n', article_soup.text)

        # B4: T√≥m t·∫Øt v·ªõi Cohere
        co = cohere.Client(COHERE_API_KEY)
        response = co.chat(
            model=COHERE_MODEL,
            message="T√≥m t·∫Øt n·ªôi dung b√†i b√°o sau trong 300-400 t·ª´: " + cleaned_text
        )

        return f"T√≥m t·∫Øt b√†i b√°o th·ª© {n} ({article_url}):\n\n{response.text}"

    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"

# /start ‚Äì l·∫•y b√†i ƒë·∫ßu ti√™n
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ƒêang t√≥m t·∫Øt b√†i b√°o ƒë·∫ßu ti√™n...")
    summary = get_summary_by_index(0)
    await update.message.reply_text(summary)

# /new n ‚Äì l·∫•y b√†i th·ª© n
async def new_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) == 0:
            await update.message.reply_text("B·∫°n c·∫ßn nh·∫≠p s·ªë b√†i b√°o. V√≠ d·ª•: /new 3")
            return

        n = int(context.args[0])
        await update.message.reply_text(f"ƒêang t√≥m t·∫Øt b√†i b√°o th·ª© {n}...")
        summary = get_summary_by_index(n)
        await update.message.reply_text(summary)

    except ValueError:
        await update.message.reply_text("Tham s·ªë ph·∫£i l√† s·ªë nguy√™n. V√≠ d·ª•: /new 2") 